<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!-- typeAliases节点用来设置别名，通过配置别名，我们不用再指定完整的包名
        我们在使用 com.demo.po.Role 的时候，我们可以直接配置一个别名 role, 这样以后在配置文件中要使用到com.demo.po.Role的时候，直接使用role即可-->
    <typeAliases>
        <!-- 通过 package, 可以直接指定package的名字， mybatis会自动扫描你指定包下面的 javaBean,并且默认设置一个别名，默认的名字为：javaBean 的首字母小写的非限定类名来作为它的别名-->
        <!-- 也可在 bean 解 @Alias 来自定义别名， 例如：@Alias(user)-->
        <!-- <package name="com.demo.po"/> -->
        <!-- package 和 typeAlias 不能同时配置-->
        <typeAlias alias="role" type="com.demo.po.TblSysRole"/>
    </typeAliases>

    <!--自定义 TypeHandler-->
    <typeHandlers>
        <!--当配置package的时候，mybatis会去配置的package扫描TypeHandler-->
        <!--<package name="com.demo.handler"/>-->

        <!--1、handler属性直接配置我们要指定的TypeHandler-->
        <!--<typeHandler handler="org.mybatis.example.ExampleTypeHandler"/>-->

        <!--2、javaType 配置java类型，例如String, 如果配上javaType, 那么指定的typeHandler就只作用于指定的类型 -->
        <!--<typeHandler javaType="String" handler="org.apache.ibatis.type.StringTypeHandler"/>-->

        <!--3、jdbcType 配置数据库基本数据类型，例如varchar, 如果配上jdbcType, 那么指定的typeHandler就只作用于指定的类型  -->
        <!--<typeHandler jdbcType="VARCHAR" handler="com.demo.handler.MyStringHandler"/>-->

        <typeHandler jdbcType="VARCHAR" javaType="string" handler="com.demo.handler.MyStringHandler"/>
    </typeHandlers>

    <!-- properties 节点-->
    <!-- 方法一： 从外部指定properties配置文件, 除了使用resource属性指定外，还可通过url属性指定url -->
    <!--    <properties resource="dbConfig.properties"></properties>-->
    <!-- 方法二： 直接配置为xml，两种方式xml方式优先级高 -->
    <!--    <properties>-->
    <!--        <property name="driver" value="com.mysql.cj.jdbc.Driver"/>-->
    <!--        <property name="url" value="jdbc:mysql://localhost:3306/gims?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true"/>-->
    <!--        <property name="username" value="root"/>-->
    <!--        <property name="password" value="root"/>-->
    <!--    </properties>-->


    <!--MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成-->
    <!--默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化-->
    <!--默认情况下，我们不需要配置，mybatis会调用默认实现的objectFactory-->
    <!--除非我们要自定义ObjectFactory的实现， 那么我们才需要去手动配置-->
    <!--自定义ObjectFactory只需要去继承DefaultObjectFactory（是ObjectFactory接口的实现类），并重写其方法即可-->
    <!--<objectFactory type="org.mybatis.example.ExampleObjectFactory">-->
    <!--    <property name="someProperty" value="100"/>-->
    <!--</objectFactory>-->

    <!--plugins 是一个可选配置-->
    <!--mybatis中的plugin其实就是个 interceptor， 它可以拦截 Executor 、ParameterHandler 、ResultSetHandler 、StatementHandler 的部分方法，处理我们自己的逻辑-->
    <!--Executor 就是真正执行sql语句的东西， ParameterHandler 是处理我们传入参数-->
    <!--自定义一个 plugin, 需要去实现 Interceptor 接口-->

<!--    <plugins>-->
<!--        <plugin interceptor="com.demo.interceptor.StatementInterceptor">-->
<!--            <property name="someProperty" value="100"/>-->
<!--        </plugin>-->
<!--        <plugin interceptor="com.demo.interceptor.ExecutorInterceptor">-->
<!--            <property name="someProperty" value="100"/>-->
<!--        </plugin>-->
<!--        <plugin interceptor="com.demo.interceptor.ParameterInterceptor">-->
<!--            <property name="someProperty" value="100"/>-->
<!--        </plugin>-->
<!--        <plugin interceptor="com.demo.interceptor.ResultSetInterceptor">-->
<!--            <property name="someProperty" value="100"/>-->
<!--        </plugin>-->
<!--    </plugins>-->

    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://10.1.32.29:3306/gopher_auth?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true"/>
                <property name="username" value="gopher_auth"/>
                <property name="password" value="gopher_auth"/>
                <!-- 上面指定了数据库配置文件dbConfig.properties， 配置文件里面也是对应的这四个属性 -->
                <!-- <property name="driver" value="${driver}" />-->
                <!-- <property name="url" value="${url}" />-->
                <!-- <property name="username" value="${username}" />-->
                <!-- <property name="password" value="${password}" />-->
            </dataSource>
        </environment>
        <!-- 再指定一个environment -->
        <!--    environments元素节点可以配置多个environment子节点-->
        <!--    假如我们系统的开发环境和正式环境所用的数据库不一样（这是肯定的）， -->
        <!--    那么可以设置两个environment, 两个id分别对应开发环境（dev）和正式环境（final），-->
        <!--    那么通过配置environments的default属性就能选择对应的environment了-->
        <!--        <environment id="test">-->
        <!--            <transactionManager type="JDBC"/>-->
        <!--            <dataSource type="POOLED">-->
        <!--                <property name="driver" value="com.mysql.jdbc.Driver"/>-->
        <!--                &lt;!&ndash; 与上面的url不一样 &ndash;&gt;-->
        <!--                <property name="url" value="jdbc:mysql://localhost:3306/demo"/>-->
        <!--                <property name="username" value="root"/>-->
        <!--                <property name="password" value="root"/>-->
        <!--            </dataSource>-->
        <!--        </environment>-->
    </environments>

    <!--mappers 节点下，配置我们的mapper映射文件-->
    <!--所谓的mapper映射文件，就是让 mybatis 用来建立数据表和 javaBean 映射的一个桥梁-->
    <!--在我们实际开发中，通常一个 mapper 文件对应一个 dao 接口，这个 mapper 可以看做是 dao 的实现-->
    <mappers>
        <!--第一种方式：通过 resource 指定 -->
        <!--<mapper resource="com/demo/RoleMapper.xml"/>-->

        <!--第二种方式， 通过class指定接口，进而将接口与对应的xml文件形成映射关系，使用这种方式必须保证 接口与mapper文件同名(不区分大小写)，-->
        <!--<mapper class="com.demo.mapper.RoleMapper"/>-->

        <!--第三种方式，直接指定包，自动扫描，与方法二同理-->
        <package name="com.demo.mapper"/>

        <!--通过URL指定-->
        <!--<mapper url="file:///var/mappers/AuthorMapper.xml"/>-->
    </mappers>


</configuration>
